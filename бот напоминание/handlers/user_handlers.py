import asyncio

from aiogram import F, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from keyboards.keyboards import list_reminder_mark
from lexicon.lexicon_ru import LEXICON_RU
from shopping_reminders.shopping_list import shopping_lists
from shopping_reminders.reminders import reminders
from aiogram.utils.keyboard import InlineKeyboardBuilder
router = Router()

class Form(StatesGroup):
    new_shop = State()
    proc_reminder = State()

@router.message(CommandStart())
async def command_start(message: Message):
    await message.answer(LEXICON_RU['/start'], reply_markup=list_reminder_mark)


@router.message(F.text == LEXICON_RU['new_list'])
async def new_shopping_list(message:Message, state: FSMContext):
     await message.answer(
         text='–í–≤–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç–æ–π\n'
             '–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ú–æ–ª–æ–∫–æ, –•–ª–µ–±, –Ø–π—Ü–∞, –°—ã—Ä</b>'
     )
     await state.set_state(Form.new_shop)
@router.message(Form.new_shop)
async def process_product(message:Message, state: FSMContext):
    user_id = message.from_user.id
    products = [p.strip() for p in message.text.split(',') if p.strip()]
    if products:
        shopping_lists[user_id] = products
        response = '<b>–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:</b>\n' + '\n'.join([f'* {product} ' for product in products])
        await message.answer(text='–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–ª—è —Ç–µ–±—è —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...üñå')
        await asyncio.sleep(1)
        await message.answer(text='–ì–æ—Ç–æ–≤–æ! –∑–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫...üóí')
        await message.answer(response)
        await message.answer(text='<b>–ê —Ç–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b> ‚¨áÔ∏è')
    else:
        await message.answer('–¢—ã –≤–≤–µ–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
    await state.clear()
@router.message(F.text == LEXICON_RU['install_reminder'])
async def set_reminder(message:Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in shopping_lists or not shopping_lists[user_id]:
        await message.answer(text='–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫')
        return
    await message.answer(text='–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø–æ–∫—É–ø–∫–∞—Ö? ‚è≥')
    await state.set_state(Form.proc_reminder)

@router.message(Form.proc_reminder)
async def process_reminder_time(message:Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        minutes= int(message.text)
        if minutes <= 0:
            raise ValueError

        reminders[user_id] = {
            'products': shopping_lists[user_id].copy()
        }

        await message.answer(f'–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ –ø–æ–∫—É–ø–∫–∞—Ö —á–µ—Ä–µ–∑ <b>{minutes}</b> –º–∏–Ω—É—Ç‚ùóÔ∏è ')

        await asyncio.sleep(minutes * 60)

        if user_id in reminders:
            await message.answer(text =
                                 f'<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–∞—Ö:</b> üîî\n''–û—Ç–º–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ÜôÔ∏è' + '\n',
                                 reply_markup=inline_button(user_id)
                                )


    except ValueError:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç')

    await state.clear()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ "–ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫"
def inline_button(user_id) -> InlineKeyboardMarkup:
    products = shopping_lists[user_id]
    builder = InlineKeyboardBuilder()
    for product in products:
        builder.row(InlineKeyboardButton(text=f'‚òëÔ∏è{product}', callback_data=f'productList_{product}'))
    return builder.as_markup()


@router.callback_query(F.data.startswith('productList_'))
async def handle_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    product = callback.data.split('_')[1]
    if user_id in shopping_lists and product in shopping_lists[user_id]:
        shopping_lists[user_id].remove(product)
        await callback.message.edit_text(
            text=f'‚úÖ{product} - –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω–æ–µ!\n\n' + callback.message.text, reply_markup= inline_button(user_id))
        if not shopping_lists[user_id]:
            await callback.message.answer(text='<b>–¢—ã –æ—Ç–º–µ—Ç–∏–ª –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞!</b>\n\n\n'
                                               '<u><i>–ë—ã–ª–∏ —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º!</i></u>')




